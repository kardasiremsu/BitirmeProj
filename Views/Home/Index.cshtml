@using BitirmeProj.Data
@using BitirmeProj.Utilities
@model IEnumerable<BitirmeProj.Models.JobListing>
@inject ApplicationDBContext _context // Inject ApplicationDBContext into the view

@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="~/css/home.css" asp-append-version="true" />
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<!-- Bootstrap CSS -->

<style>
    .job-listings {
        background-color: darkgray; /* Gray background */
        padding: 20px;
    }

    .job-card {
        background-color: #ffffff; /* White background */
        margin-bottom: 20px;
        border-radius: 5px;
        padding: 20px;
    }
    
    
</style>

<main class="centered-content">

    <h3>Research Job</h3>
    <section class="job-filters">

        <form asp-action="Index" method="get">
            <div class="form-action no-color">
                <p class="input-group-text">
                    <input placeholder="Title/Description "type="text" class = "input-group" name="titleString" value="@ViewData["TitleFilter"]"/>
                    <input placeholder="Location" type="text" class="input-group" name="locationString" value="@ViewData["LocationFilter"]" />
                    <input type="submit" value="Search" class="btn btn-secondary"/>
                    <a class= "btn btn-outline-secondary" asp-action="Index">Back to Full List </a>
                </p>
            </div>
        </form>
    </section>
    


    <section class="job-order">

        <a class = "btn btn-outline-primary" asp-action="Index" asp-route-sortOrder="@ViewData["TitleSortParam"]">
            Order By Title
        </a>
        <a class = "btn btn-outline-primary"  asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParam"]">
            Order By Date
        </a>

    </section>
    
  
    @section Scripts {

        <script>
            function viewJobDetails(job) {
                console.log("log deneme");
                var applicationDeadlineDateOnly = new Date(job.applicationDeadline).toLocaleDateString();
                console.log("log deneme");
                // Construct the detailed job information
                var details = "<p><strong>Title:</strong> " + job.jobTitle + "</p>" +
                    "<p><strong>Location:</strong> " + getJobLocationText(job.jobLocation) + "</p>" +
                    "<p><strong>Type:</strong> " + getJobTypeText(job.jobType) + "</p>" +
                    "<p><strong>Application Deadline:</strong> " + applicationDeadlineDateOnly + "</p>" +
                    "<p><strong>Experience Level:</strong> " + getExperienceLevelText(job.experienceLevel) + "</p>" +
                    "<p><strong>Salary:</strong> " + job.salary + " " + getSalaryCurrencyText(job.salaryCurrency) + "</p>";

                // Update modal content with job details
                $('#jobDetailsModal .modal-body').html(details);

                // Show the modal
                $('#jobDetailsModal').modal('show');
            }

            function editJob(jobId) {
                // Redirect the user to the edit page with the jobId
                window.location.href = '/Job/Edit/' + jobId;
            }

            function applyJob(jobId) {
                // Add logic to handle applying to the job
                console.log('Applying to job with ID ' + jobId);
            }
            function getJobTypeText(jobType) {
                
                // Replace this with your actual logic to retrieve job type text from dictionary
                var jobTypeOptions = @Html.Raw(Json.Serialize(JobApplicationOptions.JobTypeOptions));
                return jobTypeOptions[jobType] || jobType;
            }
            function getExperienceLevelText(experienceLevel) {
                var experienceLevelOptions = @Html.Raw(Json.Serialize(JobApplicationOptions.ExperienceLevelOptions));
                return experienceLevelOptions[experienceLevel] || experienceLevel;
            }

            function getWorkPlaceTypeText(workPlaceType) {
                var workPlaceTypeOptions = @Html.Raw(Json.Serialize(JobApplicationOptions.WorkPlaceTypeOptions));
                return workPlaceTypeOptions[workPlaceType] || workPlaceType;
            }

            function getSalaryCurrencyText(salaryCurrency) {
                var salaryCurrencyOptions = @Html.Raw(Json.Serialize(JobApplicationOptions.SalaryCurrencyOptions));
                return salaryCurrencyOptions[salaryCurrency] || salaryCurrency;
            }
            function getJobLocationText(jobLocation) {
                var jobLocationOptions = @Html.Raw(Json.Serialize(JobApplicationOptions.JobLocationOptions));
                return jobLocationOptions[jobLocation] || jobLocation;
            }
        </script>
    }

    <!-- Modal -->
    <div class="modal fade" id="jobDetailsModal" tabindex="-1" role="dialog" aria-labelledby="jobDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="jobDetailsModalLabel">Job Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Job details will be inserted here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="editJob()">Edit</button>
                    <button type="button" class="btn btn-success" onclick="applyJob()">Apply</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                </div>
            </div>
        </div>
    </div>


    <div class="container">

    
    @foreach (var item in Model)
    {
            var postedByFullName = UserService.GetUserFullName(item.PostedBy, _context); // Assuming _context is available in your Razor view or controller

            <div class="row justify-content-center">

            <div class="col-md-10">

        <div class="job-card">
                        <p><strong>Posted By:</strong> @postedByFullName</p>

            <h2>@Html.DisplayFor(modelItem => item.JobTitle)</h2>

                        <div style="max-height: 15em; overflow-y: auto;  /">
                            <p><strong>Description:</strong></p>
                            <pre>@Html.Raw(item.JobDescription)</pre>
                        </div>



            <button type="button" class="btn btn-primary" onclick="viewJobDetails({
           
            jobID: '@item.JobID',
            jobTitle: '@Html.Raw(item.JobTitle)',
            jobLocation: '@Html.Raw(item.JobLocation)',
            jobType: '@item.JobType',
            applicationDeadline: '@item.ApplicationDeadline',
            experienceLevel: '@item.ExperienceLevel',
            salary: '@item.Salary',
            salaryCurrency: '@item.SalaryCurrency'
        })">
                View Job Details
            </button>
            </div>
        </div>
            </div>


    }
    </div>

 

    <script src="~/js/home.js" asp-append-version="true"></script>

</main>

